//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34003.
// 
#pragma warning disable 1591

namespace RGI_BPM_WCF_Service.TechDesk
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "TechDeskSoapBinding", Namespace = "http://rgicl.techdesk.savvion.com")]
    public partial class TechDeskService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback STARTCALLDESKOperationCompleted;

        private System.Threading.SendOrPostCallback getPerformerOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public TechDeskService()
        {
            this.Url = global::RGI_BPM_WCF_Service.Properties.Settings.Default.RGI_BPM_WCF_Service_TechDesk_TechDeskService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event STARTCALLDESKCompletedEventHandler STARTCALLDESKCompleted;

        /// <remarks/>
        public event getPerformerCompletedEventHandler getPerformerCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://rgicl.techdesk.savvion.com", ResponseNamespace = "http://rgicl.techdesk.savvion.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("STARTCALLDESKReturn")]
        public string STARTCALLDESK(
                    string UserRemark,
                    string ApproverEmailID,
                    string ApproverDesignation,
                    string ApproverName,
                    string UserEmailID,
                    string UserContactNo,
                    string ApplicationType,
                    string ApproverID,
                    string ReopenId,
                    string Branch,
                    string CallLogDate,
                    string UploadScreen,
                    string CallCreatedBy,
                    string CallType,
                    string IssueRequestId,
                    string TicketNo,
                    string ChannelSM,
                    string TeamName,
                    string IssueReqSubTypeID,
                    string TeamTAT,
                    string ApproverUserID2,
                    string AppSupportPerformer,
                    string Approver2Dsgn,
                    string Approver2Email,
                    string Approver2Name,
                    string TicketValue,
                    string username,
                    string password,
                    string piName,
                    string priority)
        {
            object[] results = this.Invoke("STARTCALLDESK", new object[] {
                        UserRemark,
                        ApproverEmailID,
                        ApproverDesignation,
                        ApproverName,
                        UserEmailID,
                        UserContactNo,
                        ApplicationType,
                        ApproverID,
                        ReopenId,
                        Branch,
                        CallLogDate,
                        UploadScreen,
                        CallCreatedBy,
                        CallType,
                        IssueRequestId,
                        TicketNo,
                        ChannelSM,
                        TeamName,
                        IssueReqSubTypeID,
                        TeamTAT,
                        ApproverUserID2,
                        AppSupportPerformer,
                        Approver2Dsgn,
                        Approver2Email,
                        Approver2Name,
                        TicketValue,
                        username,
                        password,
                        piName,
                        priority});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void STARTCALLDESKAsync(
                    string UserRemark,
                    string ApproverEmailID,
                    string ApproverDesignation,
                    string ApproverName,
                    string UserEmailID,
                    string UserContactNo,
                    string ApplicationType,
                    string ApproverID,
                    string ReopenId,
                    string Branch,
                    string CallLogDate,
                    string UploadScreen,
                    string CallCreatedBy,
                    string CallType,
                    string IssueRequestId,
                    string TicketNo,
                    string ChannelSM,
                    string TeamName,
                    string IssueReqSubTypeID,
                    string TeamTAT,
                    string ApproverUserID2,
                    string AppSupportPerformer,
                    string Approver2Dsgn,
                    string Approver2Email,
                    string Approver2Name,
                    string TicketValue,
                    string username,
                    string password,
                    string piName,
                    string priority)
        {
            this.STARTCALLDESKAsync(UserRemark, ApproverEmailID, ApproverDesignation, ApproverName, UserEmailID, UserContactNo, ApplicationType, ApproverID, ReopenId, Branch, CallLogDate, UploadScreen, CallCreatedBy, CallType, IssueRequestId, TicketNo, ChannelSM, TeamName, IssueReqSubTypeID, TeamTAT, ApproverUserID2, AppSupportPerformer, Approver2Dsgn, Approver2Email, Approver2Name, TicketValue, username, password, piName, priority, null);
        }

        /// <remarks/>
        public void STARTCALLDESKAsync(
                    string UserRemark,
                    string ApproverEmailID,
                    string ApproverDesignation,
                    string ApproverName,
                    string UserEmailID,
                    string UserContactNo,
                    string ApplicationType,
                    string ApproverID,
                    string ReopenId,
                    string Branch,
                    string CallLogDate,
                    string UploadScreen,
                    string CallCreatedBy,
                    string CallType,
                    string IssueRequestId,
                    string TicketNo,
                    string ChannelSM,
                    string TeamName,
                    string IssueReqSubTypeID,
                    string TeamTAT,
                    string ApproverUserID2,
                    string AppSupportPerformer,
                    string Approver2Dsgn,
                    string Approver2Email,
                    string Approver2Name,
                    string TicketValue,
                    string username,
                    string password,
                    string piName,
                    string priority,
                    object userState)
        {
            if ((this.STARTCALLDESKOperationCompleted == null))
            {
                this.STARTCALLDESKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSTARTCALLDESKOperationCompleted);
            }
            this.InvokeAsync("STARTCALLDESK", new object[] {
                        UserRemark,
                        ApproverEmailID,
                        ApproverDesignation,
                        ApproverName,
                        UserEmailID,
                        UserContactNo,
                        ApplicationType,
                        ApproverID,
                        ReopenId,
                        Branch,
                        CallLogDate,
                        UploadScreen,
                        CallCreatedBy,
                        CallType,
                        IssueRequestId,
                        TicketNo,
                        ChannelSM,
                        TeamName,
                        IssueReqSubTypeID,
                        TeamTAT,
                        ApproverUserID2,
                        AppSupportPerformer,
                        Approver2Dsgn,
                        Approver2Email,
                        Approver2Name,
                        TicketValue,
                        username,
                        password,
                        piName,
                        priority}, this.STARTCALLDESKOperationCompleted, userState);
        }

        private void OnSTARTCALLDESKOperationCompleted(object arg)
        {
            if ((this.STARTCALLDESKCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.STARTCALLDESKCompleted(this, new STARTCALLDESKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://rgicl.techdesk.savvion.com", ResponseNamespace = "http://rgicl.techdesk.savvion.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("getPerformerReturn")]
        public string getPerformer(string ticketNumber, string performerType)
        {
            object[] results = this.Invoke("getPerformer", new object[] {
                        ticketNumber,
                        performerType});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getPerformerAsync(string ticketNumber, string performerType)
        {
            this.getPerformerAsync(ticketNumber, performerType, null);
        }

        /// <remarks/>
        public void getPerformerAsync(string ticketNumber, string performerType, object userState)
        {
            if ((this.getPerformerOperationCompleted == null))
            {
                this.getPerformerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPerformerOperationCompleted);
            }
            this.InvokeAsync("getPerformer", new object[] {
                        ticketNumber,
                        performerType}, this.getPerformerOperationCompleted, userState);
        }

        private void OngetPerformerOperationCompleted(object arg)
        {
            if ((this.getPerformerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPerformerCompleted(this, new getPerformerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void STARTCALLDESKCompletedEventHandler(object sender, STARTCALLDESKCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class STARTCALLDESKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal STARTCALLDESKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void getPerformerCompletedEventHandler(object sender, getPerformerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPerformerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getPerformerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591